<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================

     Kajona Head Build
     Buildfile to perform additional actions such as phpunit-tests generation, ...
     Called by the buildserver, so change with care :)
     This file is created for Jenkins but may be called from the CLI, too.

     This build-file may be migrated to phing, feel free to start the migration


     Author: sidler
     $Id$

     ====================================================================== -->
<project name="Kajona Head Build" default="buildSqliteFast" basedir=".">

    <description>
        Buildfile to run common tasks.
        This buildfile is meant to be run on a SVN development snapshot, so NOT on a real project.
        The buildfile expects all modules to be checked out located at /core.
    </description>

    <!--
         CONFIG VALUES BELOW
     -->

    <!-- setting windows specific properties-->
    <condition property="yuicompressor" value="yuicompressor-2.4.7.jar" else="yuicompressor-2.4.8.jar"> <!--using 2.4.7 for windows because of a bug 2.4.8 for windows-->
        <os family="windows" />
    </condition>
    <condition property="script-suffix" value=".bat" else="">
        <os family="windows" />
    </condition>
    <condition property="composerHome" value="${user.home}/AppData/Roaming/Composer" else="${user.home}/.composer">
        <os family="windows" />
    </condition>


    <!-- target dir for the sources from the svn repo -->
    <property name="sourcesPath"  value="/../../" />
    <!-- target dir to install the system to. this folder is also referenced in the phpunit config file! -->
    <property name="projectPath"  value="/buildproject" />
    <!-- artifacts such as logs and reports will be stored here -->
    <property name="buildPath"    value="/build" />
    <!-- js tests and node tasks -->
    <property name="jsPath"    value="/jstests" />
    <!-- generated zips will be placed here (full, light) -->
    <property name="packagesPath" value="/packages" />
    <!-- temp-folder, required to build the packages -->
    <property name="tempPath"     value="/temp/kajona" />
    <!-- composer-folder, required for composer dependcy management -->
    <property name="composerPath"     value="/composer" />
    <!-- path to the composer binaries -->
    <property name="composerBinariesPath" value="${composerHome}/vendor/bin" />



    <!-- path to composer -->
    <property name="path.composer"  value="composer${script-suffix}" />
    <!-- path to node -->
    <property name="path.node"      value="node" />
    <!-- path to npm -->
    <property name="path.npm"       value="npm${script-suffix}" />
    <!-- path to phpunit -->
    <property name="path.phpunit"   value="${composerBinariesPath}/phpunit${script-suffix}" />
    <!-- path to phpcs -->
    <property name="path.phpcs"     value="${composerBinariesPath}/phpcs${script-suffix}" />
    <!-- path to phpmd -->
    <property name="path.phpmd"     value="${composerBinariesPath}/phpmd${script-suffix}" />
    <!-- path to phpcpd -->
    <property name="path.phpcpd"    value="${composerBinariesPath}/phpcpd${script-suffix}" />
    <!-- path to pdepend -->
    <property name="path.pdepend"   value="${composerBinariesPath}/pdepend${script-suffix}" />
    <!-- path to php -->
    <property name="path.php"       value="php" />
    <!-- path to phploc -->
    <property name="path.phploc"    value="${composerBinariesPath}/phploc${script-suffix}" />
    <!-- path to phpcb -->
    <property name="path.phpcb"     value="${composerBinariesPath}/phpcb${script-suffix}" />


    <!--
             No need to change anything below!
     -->


    <!-- internal initialization -->
    <target name="init" depends="cleanFilesystem,installComposerBuildDependencies,installNpmBuildDependencies">
        <tstamp />
    </target>

    <target name="buildSqliteFast" depends="
		    								init,
					    					buildProject, installProjectSqlite,
					    					lint,phploc,phpunitFast,jasmine,protractor,
					    					buildFullZip, buildLightZip, buildAllInOneZip" />


    <target name="buildSqliteFull" depends="
		    								init,
					    					buildProject, installProjectSqlite,
					    					lint,phpunit,jasmine,protractor,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,generateDoxygenDocs,phpcb,
					    					buildFullZip, buildLightZip, buildAllInOneZip" />

    <target name="buildMysql" depends="
		    								init,
					    					buildProject, installProjectMysql,
					    					phpunitFast,jasmine,protractor" />

    <target name="buildOracle" depends="
		    								init,
					    					buildProject, installProjectOracle,
					    					phpunitFast,jasmine,protractor" />

    <target name="buildPostgres" depends="
		    								init,
					    					buildProject, installProjectPostgres,
					    					phpunitFast,jasmine,protractor" />

    <target name="buildFullZipOnly" depends="
                                            init,
                                            buildProject, buildFullZip" />



    <!-- installs all composer dependencies required for the build itself, so mainly external tools -->
    <target name="installComposerBuildDependencies" >
        <echo>Copy composer.json and composer.lock to ${composerHome}</echo>
        <copy todir="${composerHome}" overwrite="true"  includeEmptyDirs="true" >
            <fileset id="composer.dirs" dir="${basedir}${composerPath}">
                <include name="composer.json"/>
                <include name="composer.lock"/>
            </fileset>
        </copy>

        <echo>Execute composer</echo>
        <exec executable="${path.composer}" failonerror="on">
            <arg line=" global"/>
            <arg line=" install"/>
            <arg line=" --prefer-source"/>
            <arg line=" --no-dev"/>
        </exec>
    </target>

    <!-- installs all node dependencies -->
    <target name="installNpmBuildDependencies" >
        <echo>Execute npm</echo>
        <exec dir="${basedir}${jsPath}" executable="${path.npm}" failonerror="on">
            <arg line=" install"/>
        </exec>
    </target>

    <!-- executes javascript jasmine tests -->
    <target name="jasmine">
        <exec dir="${basedir}${jsPath}" executable="${path.node}" failonerror="on">
            <arg line="./node_modules/jasmine/bin/jasmine.js"/>
        </exec>
    </target>

    <!-- start webserver -->
    <target name="startWebserver">
        <exec dir="${basedir}${projectPath}" executable="${path.php}" spawn="true">
            <arg line="-S 127.0.0.1:8080"/>
        </exec>
        <echo message="Started webserver ..." />
        <sleep seconds="2" />
    </target>

    <!-- executes selenium protractor tests -->
    <target name="protractor" depends="startWebserver">
        <exec dir="${basedir}${jsPath}" executable="${path.node}">
            <arg line="./node_modules/protractor/bin/webdriver-manager update"/>
        </exec>
        <exec dir="${basedir}${jsPath}" executable="${path.node}" spawn="true">
            <arg line="./node_modules/protractor/bin/webdriver-manager start"/>
        </exec>
        <echo message="Started selenium server ..." />
        <!-- wait for webdriver to start -->
        <sleep seconds="4" />
        <exec dir="${basedir}${jsPath}" executable="${path.node}" failonerror="on">
            <arg line="./node_modules/protractor/bin/protractor e2e/conf.js"/>
        </exec>
    </target>

    <!-- removes existing folders and creates them again -->
    <target name="cleanFilesystem">
        <delete dir="${basedir}${packagesPath}"/>
        <mkdir  dir="${basedir}${packagesPath}"/>

        <delete dir="${basedir}${tempPath}"/>
        <delete dir="${basedir}${tempPath}/../" />
        <mkdir  dir="${basedir}${tempPath}"/>

        <delete dir="${basedir}${projectPath}"/>
        <mkdir  dir="${basedir}${projectPath}"/>

        <delete dir="${basedir}${buildPath}"/>
        <mkdir  dir="${basedir}${buildPath}"/>
        <mkdir  dir="${basedir}${buildPath}/api"/>
        <mkdir  dir="${basedir}${buildPath}/logs"/>
        <mkdir  dir="${basedir}${buildPath}/coverage"/>
        <mkdir  dir="${basedir}${buildPath}/code-browser"/>
        <mkdir  dir="${basedir}${buildPath}/pdepend"/>
        <mkdir  dir="${basedir}${buildPath}/phpdox"/>

    </target>


    <!-- builds the project, aka creates a project out of the sources -->
    <target name="buildProject">

        <copy todir="${basedir}${projectPath}" overwrite="true"  includeEmptyDirs="true" >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".svn"/>
                <exclude name=".git"/>
                <include name="core*/element_*/**"/>
                <include name="core*/module_*/*/**"/>
                <include name="core*/template_*/*/**"/>
                <include name="core*/_debugging/*/**"/>
                <include name="core*/*.php"/>
                <include name="core*/*.htaccess"/>
            </fileset>
        </copy>


    </target>

    <!-- creates the full-zip including all modules and elements -->
    <target name="buildFullZip" depends="init" >
        <antcall target="setupPackageFolders" />
        <copy todir="${basedir}${tempPath}" overwrite="true"  includeEmptyDirs="true" >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".svn"/>
                <exclude name=".git"/>
                <exclude name="core*/module_pchart/" />
                <exclude name="core*/module_flotchart/" />

                <include name="core*/element_*/**"/>
                <include name="core*/module_*/*/**"/>
                <include name="core*/template_*/*/**"/>
                <!--<include name="_debugging/*/**"/>-->
                <include name="core*/*.php"/>
                <include name="core*/*.htaccess"/>
            </fileset>
        </copy>

        <antcall target="buildPackageHelper" />

        <zip destfile="${basedir}${packagesPath}/kajona_v4_full_${DSTAMP}-${TSTAMP}.zip">
            <fileset dir="${basedir}${tempPath}/../" />
        </zip>
    </target>

    <!-- creates the full-zip including all modules and elements -->
    <target name="buildAllInOneZip" depends="init" >
        <antcall target="setupPackageFolders" />
        <copy todir="${basedir}${tempPath}" overwrite="true"  includeEmptyDirs="true" >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".svn"/>
                <exclude name=".git"/>
                <exclude name="core*/element_flash/" />
                <exclude name="core*/element_maps/" />
                <exclude name="core*/element_userlist/" />
                <exclude name="core*/element_mediaplayer/" />
                <exclude name="core*/module_ldap/" />
                <exclude name="core*/module_packageserver/" />
                <exclude name="core*/module_pchart/" />
                <exclude name="core*/module_flotchart/" />
                <exclude name="core*/module_workflows/" />
                <exclude name="core*/module_pdf/" />
                <exclude name="core*/module_pageimportexport/" />
                <exclude name="core*/module_demo/" />

                <include name="core*/element_*/**"/>
                <include name="core*/module_*/**"/>
                <include name="core*/template_*/**"/>
                <include name="core*/*.php"/>
                <include name="core*/*.htaccess"/>
            </fileset>
        </copy>

        <antcall target="buildPackageHelper" />

        <zip destfile="${basedir}${packagesPath}/kajona_v4_allinone_${DSTAMP}-${TSTAMP}.zip">
            <fileset dir="${basedir}${tempPath}/../" />
        </zip>
    </target>

    <!-- creates the light-zip, only a limited set of modules included -->
    <target name="buildLightZip" depends="init">
        <antcall target="setupPackageFolders" />
        <copy todir="${basedir}${tempPath}" overwrite="true"  includeEmptyDirs="true"  >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".svn"/>
                <exclude name=".git"/>
                <include name="core*/module_navigation/**"/>
                <include name="core*/module_pages/**"/>
                <include name="core*/module_samplecontent/**"/>
                <include name="core*/module_packagemanager/**"/>
                <include name="core*/module_mediamanager/**"/>
                <include name="core*/module_system/**"/>
                <include name="core*/module_search/**"/>
                <include name="core*/module_tags/**"/>
                <include name="core*/module_dashboard/**"/>
                <include name="core*/module_installer/**"/>
                <include name="core*/module_v4skin/**"/>
                <include name="core*/*.php"/>
                <include name="core*/*.htaccess"/>
            </fileset>
        </copy>

        <antcall target="buildPackageHelper" />

        <zip destfile="${basedir}${packagesPath}/kajona_v4_light_${DSTAMP}-${TSTAMP}.zip">
            <fileset dir="${basedir}${tempPath}/../" />
        </zip>
    </target>

    <target name="modulePackagesZipHelper" depends="init" description="call this task before using the shellscript in order to generate module-zips">
        <copy todir="${basedir}${tempPath}" overwrite="true"  includeEmptyDirs="true"  >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".svn"/>
                <exclude name=".git"/>
                <include name="core*/element_*/**"/>
                <include name="core*/module_*/**"/>
                <include name="core*/template_*/**"/>
                <include name="core*/_debugging/**"/>
                <include name="core*/*.php"/>
            </fileset>
        </copy>

        <apply executable="unoconv" parallel="false" dest="${basedir}${tempPath}" verbose="true">
            <arg line="-f pdf"/>
            <fileset dir="${basedir}${tempPath}" includes="**/*.odt"/>
            <arg value="-o" />
            <targetfile/>
            <srcfile/>
            <mapper type="glob" from="*.odt" to="*.pdf"/>
        </apply>

        <antcall target="buildPackageHelper" />

    </target>

    <target name="buildPackageHelper" description="triggers the project setup and the compilation / compression of css / js files">
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${tempPath} onlySetup"/>
        </exec>
        <antcall target="compileLess" />
        <antcall target="compressCss" />
        <antcall target="compressJs" />
        <antcall target="cleanZipContent" />
    </target>

    <target name="buildPackageHelperProject" description="triggers the project setup and the compilation / compression of css / js files">
        <antcall target="compileLess" />
        <antcall target="compressCss" />
        <antcall target="compressJs" />
        <antcall target="cleanZipContent" />
    </target>

    <target name="setupPackageFolders" description="deletes the temp-folders and creates the initial structure">
        <delete dir="${basedir}${tempPath}"/>
        <mkdir  dir="${basedir}${tempPath}"/>
    </target>

    <!-- triggers the installation of the project aka. creating the db-structure -->

    <!-- sqlite3 config file -->
    <target name="installProjectSqlite">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_sqlite3.php"/>
        </exec>
    </target>

    <!-- mysql config file -->
    <target name="installProjectMysql">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_mysql.php"/>
        </exec>
    </target>

    <!-- oracle config file -->
    <target name="installProjectOracle">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_oracle.php"/>
        </exec>
    </target>

    <!-- postgres config file -->
    <target name="installProjectPostgres">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_postgres.php"/>
        </exec>
    </target>




    <target name="cleanZipContent" description="Removes internal files used by the development not to be included into the build zips">
        <delete includeemptydirs="true">
            <fileset dir="${basedir}${tempPath}" includes="**/*.less"/>
            <fileset dir="${basedir}${tempPath}" includes="**/less.js"/>
            <fileset dir="${basedir}${tempPath}" includes="**/less-full.js"/>
            <fileset dir="${basedir}${tempPath}" includes="**/*.odt"/>
            <fileset dir="${basedir}${tempPath}" includes="**/core*/*/tests/**"/>
            <fileset dir="${basedir}${tempPath}" includes="**/setupproject.php"/>
        </delete>
    </target>


    <target name="compileLess" description="Compiles the less files and inserts them into to tpl files">
        <echo>Compiling less files</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f lessc/v4setup.php "/>
        </exec>
    </target>



    <target name="compressCss" description="Minifies the css files using the yui compressor">
        <echo>Compressing css files</echo>

        <copy todir="${basedir}${tempPath}">
            <fileset dir="${basedir}${tempPath}">
                <include name="**/*.css"/>
            </fileset>
            <globmapper from="*.css" to="*-full.css"/>
        </copy>

        <apply executable="java" parallel="false" dest="${basedir}${tempPath}" verbose="true" force="true" failonerror="true">
            <fileset dir="${basedir}${tempPath}" includes="**/*-full.css"/>
            <arg line="-jar"/>
            <arg path="${yuicompressor}"/>
            <arg line="--charset utf-8"/>
            <arg line="-o"/>
            <mapper type="glob" from="*-full.css" to="*.css"/>
            <targetfile/>
            <srcfile/>
        </apply>
    </target>


    <target name="compressJs" description="Minifies the js files using the yui compressor">
        <echo>Compressing js files</echo>

        <copy todir="${basedir}${tempPath}"> <!-- add verbose="true" to see the list of applied files -->
            <fileset dir="${basedir}${tempPath}">
                <include name="**/*.js"/>
                <exclude name="**/*min.js" />
                <exclude name="**/jquery*.js" />
                <exclude name="**/ckeditor/**/*.js" />
            </fileset>
            <globmapper from="*.js" to="*-full.js"/>
        </copy>

        <apply executable="java" parallel="false" dest="${basedir}${tempPath}" verbose="true" force="true" failonerror="true">
            <fileset dir="${basedir}${tempPath}" includes="**/*-full.js"/>
            <arg line="-jar"/>
            <arg path="${yuicompressor}"/>
            <arg line="--charset utf-8"/>
            <arg line="-o"/>
            <mapper type="glob" from="*-full.js" to="*.js"/>
            <targetfile/>
            <srcfile/>
        </apply>
    </target>


    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="${path.php}" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}${projectPath}">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="${path.phploc}">
            <arg line=" --exclude ${basedir}${projectPath}/core/module_ezcchart/system/ezcomponents --exclude ${basedir}${projectPath}/core/module_pchart/system/pchart --exclude ${basedir}${projectPath}/core/module_pdf/system/tcpdf --exclude ${basedir}${projectPath}/core/module_phpexcel/system/phpexcel --exclude ${basedir}${projectPath}/core/module_qrcode/system/phpqrcode   "/>
            <arg value="--log-csv" />
            <arg value="${basedir}${buildPath}/logs/phploc.csv" />
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="${path.pdepend}">
            <arg value="--jdepend-xml=${basedir}${buildPath}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}${buildPath}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}${buildPath}/pdepend/overview-pyramid.svg" />
            <arg value="--ignore=${basedir}${projectPath}/core/module_ezcchart/system/ezcomponents,${basedir}${projectPath}/core/module_pchart/system/pchart,${basedir}${projectPath}/core/module_pdf/system/tcpdf,${basedir}${projectPath}/core/module_phpexcel/system/phpexcel,${basedir}${projectPath}/core/module_qrcode/system/phpqrcode "/>
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>


    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="${path.phpmd}">
            <arg path="${basedir}${projectPath}" />
            <arg value="xml" />
            <arg value="--exclude" />
            <arg value="*yui*,*tcpdf*,*fonts*,*pchart*,*vendor*,*phpexcel*,*phpqrcode*" />
            <arg value="--reportfile" />
            <arg value="${basedir}${buildPath}/logs/pmd.xml" />
            <arg value="${basedir}/phpmd-ruleset.xml" />
        </exec>
    </target>


    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="${path.phpcs}"  output="/dev/null" >
            <arg value="--tab-width=4" />
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}${buildPath}/logs/checkstyle.xml" />
            <arg value="--standard=${basedir}/phpcs-ruleset.xml" />
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="${path.phpcpd}">
            <arg line=" --exclude core/module_ezcchart/system/ezcomponents --exclude core/module_pchart/system/pchart --exclude tcpdf --exclude core/module_phpexcel/system/phpexcel --exclude core/module_qrcode/system/phpqrcode   "/>
            <arg value="--log-pmd" />
            <arg value="${basedir}${buildPath}/logs/pmd-cpd.xml" />
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>


    <target name="generateDoxygenDocs">
        <echo>Generating PHP API Docs</echo>
        <chmod file="${basedir}/doxygenfilter.php" perm="700"/>
        <exec executable="bash" dir="${basedir}${projectPath}">
            <arg line="-c"/>
            <arg line="' ( cat ${basedir}/doxygen.cfg ; echo \'INPUT=${basedir}${projectPath}\' ; echo \'INPUT_FILTER=${basedir}/doxygenfilter.php\' ; echo \'OUTPUT_DIRECTORY=${basedir}/build/api\' ) | doxygen - '"/>
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="${path.phpunit}" failonerror="true">
            <arg line="--configuration ${basedir}/phpunit.xml " />
            <!--<arg path="${basedir}${projectPath}" />-->
        </exec>
    </target>

    <target name="phpunitFast" description="Run unit tests with PHPUnit">
        <exec executable="${path.phpunit}" failonerror="true">
            <arg line="--configuration '${basedir}/phpunit_fast.xml' " />
            <!--<arg path="${basedir}${projectPath}" />-->
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="${path.phpcb}">
            <arg value="--log" />
            <arg path="${basedir}${buildPath}/logs" />
            <arg value="--source" />
            <arg path="${basedir}${projectPath}" />
            <arg value="--output" />
            <arg path="${basedir}${buildPath}/code-browser" />
        </exec>
    </target>


    <target name="odt2pdf" description="converts odt files to pdfs" depends="cleanFilesystem, init, buildProject">
        <apply executable="unoconv" parallel="false" dest="${basedir}${projectPath}" verbose="true">
            <arg line="-f pdf"/>
            <fileset dir="${basedir}${projectPath}" includes="**/*.odt"/>
            <arg value="-o" />
            <targetfile/>
            <srcfile/>
            <mapper type="glob" from="*.odt" to="*.pdf"/>
        </apply>
    </target>

</project>
